{"version":3,"sources":["pomodoro.png","Timers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Timers","sessionTime","breakTime","handleTimerSet","className","id","role","aria-label","Button","onClick","icon","faCaretDown","size","faCaretUp","App","useState","started","setStarted","Date","now","start","stop","setStop","elapsed","setElapsed","setSessionTime","setBreakTime","test","setTest","handleStart","handleStop","handleElapsed","console","log","getTime","elapsedDate","Math","round","src","pomodoro","alt","e","faPlay","faPause","faRedoAlt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.78545ec7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pomodoro.7ffd2e73.png\";","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCaretUp,\n  faCaretDown,\n  faPlay,\n  faPause,\n  faRedoAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Timers({ sessionTime, breakTime, handleTimerSet }) {\n  return (\n    <>\n      <div className=\"d-flex flex-row justify-content-center\">\n        <div id=\"session-block\" className=\"p-2 text-center\">\n          <div id=\"session-label\" className=\"alert alert-primary\" role=\"alert\">\n            <div>Session:</div>\n            <div className=\"lead\">\n              <div id=\"session-length\" className=\"badge badge-primary lead\">\n                {sessionTime} min\n              </div>\n            </div>\n            <div\n              className=\"btn-group mt-2\"\n              role=\"group\"\n              aria-label=\"set session length\"\n            >\n              <Button\n                id=\"session-decrement\"\n                className=\"btn btn-primary\"\n                onClick={() => handleTimerSet(\"session-decrement\")}\n              >\n                <FontAwesomeIcon icon={faCaretDown} size=\"2x\" />\n              </Button>\n              <Button\n                id=\"session-increment\"\n                className=\"btn btn-primary\"\n                onClick={() => handleTimerSet(\"session-increment\")}\n              >\n                <FontAwesomeIcon icon={faCaretUp} size=\"2x\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div id=\"break-block\" className=\"p-2 text-center\">\n          <div id=\"break-label\" className=\"alert alert-success\" role=\"alert\">\n            <div>Break:</div>\n            <div className=\"lead\">\n              <span id=\"break-length\" className=\"badge badge-success\">\n                {breakTime} min\n              </span>\n            </div>\n            <div\n              className=\"btn-group mt-2\"\n              role=\"group\"\n              aria-label=\"set break length\"\n            >\n              <Button\n                id=\"break-decrement\"\n                className=\"btn btn-success\"\n                onClick={() => handleTimerSet(\"break-decrement\")}\n              >\n                <FontAwesomeIcon icon={faCaretDown} size=\"2x\" />\n              </Button>\n              <Button\n                id=\"break-increment\"\n                className=\"btn btn-success\"\n                onClick={() => handleTimerSet(\"break-increment\")}\n              >\n                <FontAwesomeIcon icon={faCaretUp} size=\"2x\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Timers;\n","import React, { useState } from \"react\";\nimport pomodoro from \"./pomodoro.png\";\nimport { Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCaretUp,\n  faCaretDown,\n  faPlay,\n  faPause,\n  faRedoAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./App.css\";\nimport Clock from \"./Clock\";\nimport Timers from \"./Timers\";\n\nfunction App() {\n  const [started, setStarted] = useState(false);\n  const [start, setStart] = useState(Date.now());\n  const [stop, setStop] = useState(Date.now());\n  const [elapsed, setElapsed] = useState(0);\n  const [sessionTime, setSessionTime] = useState(25);\n  const [breakTime, setBreakTime] = useState(5);\n  const [test, setTest] = useState(\"initial\");\n\n  const handleTimerSet = (e) => {\n    switch (e) {\n      case \"session-decrement\":\n        return sessionTime > 0 && setSessionTime(sessionTime - 1);\n      case \"session-increment\":\n        return setSessionTime(sessionTime + 1);\n      case \"break-decrement\":\n        return breakTime > 0 && setSessionTime(sessionTime - 1);\n      case \"break-increment\":\n        return setBreakTime(breakTime + 1);\n      default:\n        break;\n    }\n  };\n\n  const handleStartStop = () => {\n    if (started) {\n      setTest(\"STOPPED\");\n      setStarted(false);\n      handleStop();\n    } else {\n      setTest(\"STARTED\");\n      setStarted(true);\n      handleStart();\n    }\n  };\n\n  const handleStart = () => {};\n\n  const handleStop = () => {\n    // let stopDate = Date.now();\n    // console.log(stopDate);\n    setStop(Date.now());\n    handleElapsed();\n  };\n\n  const handleElapsed = () => {\n    console.log(`start: ${start.getTime} stop: ${stop.getTime}`);\n    let elapsedDate = stop - start;\n    console.log(start);\n    console.log(stop);\n    console.log(Math.round(elapsedDate / 1000));\n    setElapsed(Math.round(elapsedDate / 1000));\n  };\n\n  return (\n    <div className=\"App\">\n      {/* LOGO */}\n      <h1 id=\"pomodoro\" className=\"d-flex justify-content-center my-2\">\n        <img id=\"pomodoro\" src={pomodoro} alt=\"Pomodoro\" />\n      </h1>\n      {/* SET TIMERS */}\n      <Timers\n        sessionTime={sessionTime}\n        breakTime={breakTime}\n        handleTimerSet={handleTimerSet}\n      />\n\n      {/* JUMBOTRON */}\n      <div className=\"jumbotron text-center mt-2 py-3\">\n        <h1 className=\"display-2\" id=\"time-left\">\n          25:00\n        </h1>\n        <div className=\"lead alert badge-primary display-4\" id=\"timer-label\">\n          <strong>Work Hard!</strong>\n        </div>\n        <hr className=\"my-3\" />\n        <div\n          className=\"btn-group mt-2 lead\"\n          role=\"group\"\n          aria-label=\"Play/Pause Reset\"\n        >\n          <Button\n            className=\"btn btn-dark btn-lg\"\n            id=\"start_stop\"\n            role=\"button\"\n            onClick={() => handleStartStop()}\n          >\n            <FontAwesomeIcon icon={faPlay} /> <FontAwesomeIcon icon={faPause} />\n          </Button>{\" \"}\n          <Button className=\"btn btn-secondary btn-lg\" id=\"reset\" role=\"button\">\n            <FontAwesomeIcon icon={faRedoAlt} />\n          </Button>\n        </div>\n      </div>\n      <p id=\"credits\">by LazaroFilm - last update Oct 13 11:05 AM</p>\n      <p>{test}</p>\n      {/* <p>Start Time: {() => start}</p> */}\n      {/* <p>Stop Time: {() => stop.getTime}</p> */}\n      <p>Elapsed Time: {elapsed}</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}