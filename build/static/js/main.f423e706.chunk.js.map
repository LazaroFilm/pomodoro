{"version":3,"sources":["pomodoro.png","sounds/PomodoroTicking.m4a","Clock.js","Timers.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Clock","state","dispatch","useState","bannerClass","setBannerClass","bannerTitle","setBannerTitle","useEffect","runningType","className","id","clockTime","toString","length","role","aria-label","Button","onClick","type","icon","faPlay","faPause","document","getElementById","pause","currentTime","faRedoAlt","Timers","sessionTime","faCaretDown","size","faCaretUp","breakTime","reducer","action","isRunning","test","intervalID","Error","App","useReducer","useSound","PomodoroTicking","volume","playTicking","console","log","setInterval","clearInterval","didMountRef","useRef","current","play","src","pomodoro","alt","preload","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f423e706.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pomodoro.7ffd2e73.png\";","module.exports = __webpack_public_path__ + \"static/media/PomodoroTicking.a5369aef.m4a\";","import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faRedoAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Clock({ state, dispatch }) {\n  // * Update Timer Label\n  const [bannerClass, setBannerClass] = useState(\n    \"lead alert badge-secondary display-4\"\n  );\n  const [bannerTitle, setBannerTitle] = useState(\"session\");\n  useEffect(() => {\n    if (state.runningType === \"init\") {\n      setBannerClass(\"lead alert badge-secondary display-4\");\n      setBannerTitle(\"pomodoro\");\n    } else if (state.runningType === \"session\") {\n      setBannerClass(\"lead alert badge-primary display-4\");\n      setBannerTitle(\"Session\");\n    } else if (state.runningType === \"break\") {\n      setBannerClass(\"lead alert badge-success display-4\");\n      setBannerTitle(\"Break\");\n    }\n  }, [state.runningType]);\n\n  return (\n    <div>\n      <div className=\"jumbotron text-center mt-2 py-3\">\n        <h1 className=\"display-2\" id=\"time-left\">\n          {/* adds zeros to display as mm:ss */}\n          {state.clockTime[0].toString().length === 1\n            ? `0${state.clockTime[0]}`\n            : state.clockTime[0]}\n          :\n          {state.clockTime[1].toString().length === 1\n            ? `0${state.clockTime[1]}`\n            : state.clockTime[1]}\n        </h1>\n        <div className={bannerClass} id=\"timer-label\">\n          {bannerTitle}\n        </div>\n        <hr className=\"my-3\" />\n        <div\n          className=\"btn-group mt-2 lead\"\n          role=\"group\"\n          aria-label=\"Play/Pause Reset\"\n        >\n          <Button\n            className=\"btn btn-dark btn-lg\"\n            id=\"start_stop\"\n            role=\"button\"\n            onClick={() => {\n              dispatch({ type: \"start-stop\" });\n            }}\n          >\n            <FontAwesomeIcon icon={faPlay} /> <FontAwesomeIcon icon={faPause} />\n          </Button>{\" \"}\n          <Button\n            className=\"btn btn-secondary btn-lg\"\n            id=\"reset\"\n            role=\"button\"\n            onClick={() => {\n              dispatch({ type: \"reset\" });\n              setBannerTitle(\"pomodoro\");\n              // * HTML Audio\n              document.getElementById(\"beep\").pause();\n              document.getElementById(\"beep\").currentTime = 0;\n            }}\n          >\n            <FontAwesomeIcon icon={faRedoAlt} />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Clock;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretUp, faCaretDown } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Timers({ state, dispatch }) {\n  return (\n    <>\n      <div className=\"d-flex flex-row justify-content-center\">\n        <div id=\"session-block\" className=\"p-2 text-center\">\n          <div id=\"session-label\" className=\"alert alert-primary\" role=\"alert\">\n            <div>Session:</div>\n            <div className=\"lead\">\n              <div id=\"time-selector\" className=\"badge badge-primary\">\n                <span id=\"session-length\">{state.sessionTime}</span> min\n              </div>\n            </div>\n            <div\n              className=\"btn-group mt-2\"\n              role=\"group\"\n              aria-label=\"set session length\"\n            >\n              <Button\n                id=\"session-decrement\"\n                className=\"btn btn-primary\"\n                onClick={() => dispatch({ type: \"session-decrement\" })}\n              >\n                <FontAwesomeIcon icon={faCaretDown} size=\"2x\" />\n              </Button>\n              <Button\n                id=\"session-increment\"\n                className=\"btn btn-primary\"\n                onClick={() => dispatch({ type: \"session-increment\" })}\n              >\n                <FontAwesomeIcon icon={faCaretUp} size=\"2x\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div id=\"break-block\" className=\"p-2 text-center\">\n          <div id=\"break-label\" className=\"alert alert-success\" role=\"alert\">\n            <div>Break:</div>\n            <div className=\"lead\">\n              <div id=\"time-selector\" className=\"badge badge-success\">\n                <span id=\"break-length\">{state.breakTime}</span> min\n              </div>\n            </div>\n            <div\n              className=\"btn-group mt-2\"\n              role=\"group\"\n              aria-label=\"set break length\"\n            >\n              <Button\n                id=\"break-decrement\"\n                className=\"btn btn-success\"\n                onClick={() => dispatch({ type: \"break-decrement\" })}\n              >\n                <FontAwesomeIcon icon={faCaretDown} size=\"2x\" />\n              </Button>\n              <Button\n                id=\"break-increment\"\n                className=\"btn btn-success\"\n                onClick={() => dispatch({ type: \"break-increment\" })}\n              >\n                <FontAwesomeIcon icon={faCaretUp} size=\"2x\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Timers;\n","function reducer(state, action) {\n  // console.log(state);\n  switch (action.type) {\n    // * Timer buttons\n    case \"session-decrement\":\n      if (state.sessionTime > 1) {\n        if (state.isRunning) {\n          return { ...state };\n        } else {\n          return {\n            ...state,\n            sessionTime: state.sessionTime - 1,\n            clockTime: [state.sessionTime - 1, state.clockTime[1]],\n          };\n        }\n      } else {\n        return { ...state };\n      }\n    case \"session-increment\":\n      if (state.isRunning) {\n        return { ...state };\n      } else if (state.sessionTime < 60) {\n        return {\n          ...state,\n          sessionTime: state.sessionTime + 1,\n          clockTime: [state.sessionTime + 1, state.clockTime[1]],\n        };\n      } else {\n        return {\n          ...state,\n        };\n      }\n    case \"break-decrement\":\n      if (state.isRunning) {\n        return { ...state };\n      } else if (state.breakTime > 1) {\n        return { ...state, breakTime: state.breakTime - 1 };\n      } else {\n        return { ...state };\n      }\n    case \"break-increment\":\n      if (state.isRunning) {\n        return { ...state };\n      } else if (state.breakTime < 60) {\n        return { ...state, breakTime: state.breakTime + 1 };\n      } else {\n        return { ...state };\n      }\n\n    // * Clock buttons\n    case \"reset\":\n      return {\n        isRunning: false,\n        runningType: \"init\",\n        sessionTime: 25,\n        breakTime: 5,\n        clockTime: [25, 0],\n        test: \"initial\",\n        intervalID: 0,\n      };\n    case \"start-stop\":\n      if (state.isRunning) {\n        // console.log(\"stopping now 🛑\");\n        return { ...state, isRunning: false };\n      } else {\n        // console.log(\"starting now ⏲️\");\n        if (state.runningType === \"init\") {\n          return { ...state, isRunning: true, runningType: \"session\" };\n        }\n        return { ...state, isRunning: true };\n      }\n\n    // * Countdown\n    case \"tic-toc\":\n      if (state.clockTime[1] === 0) {\n        return { ...state, clockTime: [state.clockTime[0] - 1, 59] };\n      } else {\n        return {\n          ...state,\n          clockTime: [state.clockTime[0], state.clockTime[1] - 1],\n        };\n      }\n    case \"timer-end\":\n      if (state.runningType === \"break\") {\n        return {\n          ...state,\n          runningType: \"session\",\n          clockTime: [state.sessionTime, 0],\n        };\n      } else {\n        return {\n          ...state,\n          runningType: \"break\",\n          clockTime: [state.breakTime, 0],\n        };\n      }\n    default:\n      throw new Error();\n  }\n}\n\nexport default reducer;\n","import React, { useReducer, useEffect, useRef } from \"react\";\nimport pomodoro from \"./pomodoro.png\";\nimport \"./App.css\";\nimport Clock from \"./Clock\";\nimport Timers from \"./Timers\";\nimport reducer from \"./reducer\";\nimport useSound from \"use-sound\";\n// import PomodoroRing from \"./sounds/PomodoroRing.m4a\";\nimport PomodoroTicking from \"./sounds/PomodoroTicking.m4a\";\n\nexport default function App() {\n  const initialState = {\n    isRunning: false,\n    runningType: \"init\",\n    sessionTime: 25,\n    breakTime: 5,\n    clockTime: [25, 0],\n    test: \"initial\",\n    intervalID: 0,\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // * Audio\n  // const [playRing] = useSound(PomodoroRing);\n  const [playTicking] = useSound(PomodoroTicking, { volume: 0.2 });\n\n  // * Counting down\n  useEffect(() => {\n    let intervalID;\n    if (state.isRunning) {\n      console.log(\"Ticking 🎵\");\n      playTicking();\n      intervalID = setInterval(() => {\n        dispatch({ type: \"tic-toc\" });\n      }, 1000);\n    }\n    return () => {\n      clearInterval(intervalID);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.isRunning]);\n\n  // * When timer runs out\n  const didMountRef = useRef(false);\n  useEffect(() => {\n    if (didMountRef.current) {\n      if (state.clockTime[0] <= 0 && state.clockTime[1] === 0) {\n        console.log(\"Ring 🎵\");\n        // * HTML Audio\n        document.getElementById(\"beep\").currentTime = 0;\n        document.getElementById(\"beep\").play();\n        // playRing();\n        dispatch({ type: \"timer-end\" });\n      }\n    } else didMountRef.current = true;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.clockTime]);\n\n  return (\n    <div className=\"App\">\n      <h1 id=\"pomodoro\" className=\"d-flex justify-content-center my-2\">\n        <img id=\"pomodoro\" src={pomodoro} alt=\"Pomodoro\" />\n      </h1>\n      <Timers state={state} dispatch={dispatch} />\n      <Clock state={state} dispatch={dispatch} />\n      <p id=\"credits\">by LazaroFilm - last update Oct 18 8:54 PM</p>\n\n      {/* HTML Audio */}\n      <audio\n        id=\"beep\"\n        preload=\"auto\"\n        src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n      />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// PROJECTOR SELECTOR FOR EXTERNAL TEST SCRIPT:\n// eslint-disable-next-line no-unused-vars\nconst projectName = \"25-5-clock\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}