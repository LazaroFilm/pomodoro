{"version":3,"sources":["pomodoro.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","id","src","pomodoro","alt","role","aria-label","Button","icon","faCaretDown","size","faCaretUp","faPlay","faPause","faRedoAlt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,sC,qNCkG5BC,MArFf,WACE,OACE,yBAAKC,UAAU,OACb,wBACEC,GAAG,WACHD,UAAU,gDAEV,yBAAKC,GAAG,WAAWC,IAAKC,IAAUC,IAAI,cAMxC,yBAAKJ,UAAU,0CACb,yBAAKC,GAAG,gBAAgBD,UAAU,mBAChC,yBAAKC,GAAG,gBAAgBD,UAAU,sBAAsBK,KAAK,SAC3D,yCACA,yBAAKL,UAAU,QACb,yBAAKC,GAAG,iBAAiBD,UAAU,4BAAnC,WAIF,yBACEA,UAAU,iBACVK,KAAK,QACLC,aAAW,sBAEX,kBAACC,EAAA,EAAD,CAAQN,GAAG,oBAAoBD,UAAU,mBACvC,kBAAC,IAAD,CAAiBQ,KAAMC,IAAaC,KAAK,QAE3C,kBAACH,EAAA,EAAD,CAAQN,GAAG,oBAAoBD,UAAU,mBACvC,kBAAC,IAAD,CAAiBQ,KAAMG,IAAWD,KAAK,WAK/C,yBAAKT,GAAG,cAAcD,UAAU,mBAC9B,yBAAKC,GAAG,cAAcD,UAAU,sBAAsBK,KAAK,SACzD,uCACA,yBAAKL,UAAU,QACb,0BAAMC,GAAG,eAAeD,UAAU,uBAAlC,UAIF,yBACEA,UAAU,iBACVK,KAAK,QACLC,aAAW,oBAEX,kBAACC,EAAA,EAAD,CAAQN,GAAG,kBAAkBD,UAAU,mBACrC,kBAAC,IAAD,CAAiBQ,KAAMC,IAAaC,KAAK,QAE3C,kBAACH,EAAA,EAAD,CAAQN,GAAG,kBAAkBD,UAAU,mBACrC,kBAAC,IAAD,CAAiBQ,KAAMG,IAAWD,KAAK,YAMjD,yBAAKV,UAAU,mCACb,wBAAIA,UAAU,YAAYC,GAAG,aAA7B,SAGA,yBAAKD,UAAU,qCAAqCC,GAAG,eACrD,+CAEF,wBAAID,UAAU,SACd,yBACEA,UAAU,sBACVK,KAAK,QACLC,aAAW,oBAEX,kBAACC,EAAA,EAAD,CAAQP,UAAU,sBAAsBC,GAAG,aAAaI,KAAK,UAC3D,kBAAC,IAAD,CAAiBG,KAAMI,MADzB,IACoC,kBAAC,IAAD,CAAiBJ,KAAMK,OACjD,IACV,kBAACN,EAAA,EAAD,CAAQP,UAAU,2BAA2BC,GAAG,QAAQI,KAAK,UAC3D,kBAAC,IAAD,CAAiBG,KAAMM,SAI7B,uBAAGb,GAAG,WAAN,iDCjFcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f81d931e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pomodoro.7ffd2e73.png\";","import React from \"react\";\nimport pomodoro from \"./pomodoro.png\";\nimport { Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCaretUp,\n  faCaretDown,\n  faPlay,\n  faPause,\n  faRedoAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1\n        id=\"pomodoro\"\n        className=\"display-4 d-flex justify-content-center my-4\"\n      >\n        <img id=\"pomodoro\" src={pomodoro} alt=\"Pomodoro\" />\n        {/* <span role=\"img\" aria-label=\"tomato\">\n          üçÖ ‚è≤Ô∏è\n        </span> */}\n      </h1>\n      {/* <hr className=\"my-2\" /> */}\n      <div className=\"d-flex flex-row justify-content-center\">\n        <div id=\"session-block\" className=\"p-2 text-center\">\n          <div id=\"session-label\" className=\"alert alert-primary\" role=\"alert\">\n            <div>Session:</div>\n            <div className=\"lead\">\n              <div id=\"session-length\" className=\"badge badge-primary lead\">\n                25 min\n              </div>\n            </div>\n            <div\n              className=\"btn-group mt-2\"\n              role=\"group\"\n              aria-label=\"set session length\"\n            >\n              <Button id=\"session-decrement\" className=\"btn btn-primary\">\n                <FontAwesomeIcon icon={faCaretDown} size=\"2x\" />\n              </Button>\n              <Button id=\"session-increment\" className=\"btn btn-primary\">\n                <FontAwesomeIcon icon={faCaretUp} size=\"2x\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div id=\"break-block\" className=\"p-2 text-center\">\n          <div id=\"break-label\" className=\"alert alert-success\" role=\"alert\">\n            <div>Break:</div>\n            <div className=\"lead\">\n              <span id=\"break-length\" className=\"badge badge-success\">\n                5 min\n              </span>\n            </div>\n            <div\n              className=\"btn-group mt-2\"\n              role=\"group\"\n              aria-label=\"set break length\"\n            >\n              <Button id=\"break-decrement\" className=\"btn btn-success\">\n                <FontAwesomeIcon icon={faCaretDown} size=\"2x\" />\n              </Button>\n              <Button id=\"break-increment\" className=\"btn btn-success\">\n                <FontAwesomeIcon icon={faCaretUp} size=\"2x\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"jumbotron text-center mt-4 py-4\">\n        <h1 className=\"display-2\" id=\"time-left\">\n          25:00\n        </h1>\n        <div className=\"lead alert badge-primary display-4\" id=\"timer-label\">\n          <strong>Work Hard!</strong>\n        </div>\n        <hr className=\"my-3\" />\n        <div\n          className=\"btn-group mt-2 lead\"\n          role=\"group\"\n          aria-label=\"Play/Pause Reset\"\n        >\n          <Button className=\"btn btn-dark btn-lg\" id=\"start_stop\" role=\"button\">\n            <FontAwesomeIcon icon={faPlay} /> <FontAwesomeIcon icon={faPause} />\n          </Button>{\" \"}\n          <Button className=\"btn btn-secondary btn-lg\" id=\"reset\" role=\"button\">\n            <FontAwesomeIcon icon={faRedoAlt} />\n          </Button>\n        </div>\n      </div>\n      <p id=\"credits\">by LazaroFilm - last update Oct 13 11:05 AM</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}